{"version":3,"sources":["styles/theme.js","reducer.js","styles/classes.js","Components/Product.jsx","Components/ItemInTransaction.jsx","Components/TransactionBar.jsx","Components/Routes/Storefront.jsx","Components/TransactionReport.jsx","Components/Routes/Transactions.jsx","Components/Routes/AdminPage.jsx","Components/Routes/Settings.jsx","Components/Routes/NotFound.jsx","Components/Sidebar.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["theme","createMuiTheme","palette","type","error","main","primary","purple","secondary","calculateTotal","products","length","result","map","product","quantity","price","Math","round","reduce","a","b","initialState","currentTransaction","total","reducer","state","action","payload","match","updatedTransaction","name","updatedArr","filter","fetch","method","headers","Accept","body","JSON","stringify","useStyles","makeStyles","root","display","appBar","zIndex","drawer","width","flexShrink","drawerTransaction","drawerPaper","drawerPaperTransaction","drawerContainer","overflow","content","flexGrow","padding","spacing","Product","dispatch","Grid","item","xs","md","lg","Card","style","backgroundColor","Typography","variant","container","directon","justify","paragraph","Button","color","onClick","ItemInTransaction","useContext","Context","direction","alignItems","space","fontSize","TransactionBar","classes","Drawer","className","paper","anchor","List","marginTop","ListItem","key","uuidv4","Divider","size","Storefront","useEffect","then","res","json","data","CircularProgress","TransactionReport","totalProd","transactionDate","height","Transactions","useState","transactions","setTransactions","transaction","date","AdminPage","inputs","setInputs","FormControl","InputLabel","htmlFor","Input","id","onChange","e","target","value","Settings","NotFound","BaseLayout","AppBar","position","Toolbar","noWrap","text","index","to","textDecoration","button","ListItemIcon","ListItemText","exact","from","path","component","React","createContext","App","useReducer","Provider","Paper","Boolean","window","location","hostname","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f420e41e.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport { purple } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    error: {\n      main: '#ff0000',\n    },\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: '#11cb5f',\n    },\n  },\n});\n\nexport default theme;\n","const calculateTotal = (products) => {\n  if (products.length === 0) {\n    return 0;\n  }\n  const result = products.map((product) => product.quantity * product.price);\n  return Math.round(result.reduce((a, b) => a + b) * 100) / 100;\n};\n\nexport const initialState = {\n  products: false,\n  currentTransaction: {\n    products: [],\n    total: 0,\n  },\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'GET_PRODUCTS':\n      return {\n        ...state,\n        products: action.payload,\n      };\n    case 'ADD_TO_TRANSACTION': {\n      let match = false;\n      const updatedTransaction = state.currentTransaction.products.map((product) => {\n        if (product.name === action.payload.name) {\n          match = true;\n          return { ...product, quantity: product.quantity + 1 };\n        }\n        return { ...product };\n      });\n\n      if (match) {\n        return {\n          ...state,\n          currentTransaction: {\n            products: [...updatedTransaction],\n            total: calculateTotal(updatedTransaction),\n          },\n        };\n      }\n      return {\n        ...state,\n        currentTransaction: {\n          products: [...state.currentTransaction.products, action.payload],\n          total: calculateTotal([...state.currentTransaction.products, action.payload]),\n        },\n      };\n    }\n    case 'INCREMENT_ITEM': {\n      const updatedArr = state.currentTransaction.products.map((product) => {\n        if (product.name === action.payload) {\n          return {\n            ...product,\n            quantity: product.quantity + 1,\n          };\n        }\n        return { ...product };\n      });\n      return {\n        ...state,\n        currentTransaction: {\n          products: [...updatedArr],\n          total: calculateTotal(updatedArr),\n        },\n      };\n    }\n    case 'DECREMENT_ITEM': {\n      const updatedArr = state.currentTransaction.products\n        .filter((product) => {\n          if (product.name === action.payload) {\n            return product.quantity !== 1;\n          }\n          return true;\n        })\n        .map((product) => {\n          if (product.name === action.payload) {\n            return {\n              ...product,\n              quantity: product.quantity - 1,\n            };\n          }\n          return { ...product };\n        });\n      return {\n        ...state,\n        currentTransaction: {\n          products: [...updatedArr],\n          total: calculateTotal(updatedArr),\n        },\n      };\n    }\n    case 'COMPLETE_TRANSACTION':\n      if (state.currentTransaction.products.length !== 0) {\n        fetch('/api/transactions', {\n          method: 'POST',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(state.currentTransaction),\n        });\n        return {\n          ...state,\n          currentTransaction: {\n            products: [],\n            total: 0,\n          },\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 190;\nconst drawerWidthTransaction = 270;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerTransaction: {\n    width: drawerWidthTransaction,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerPaperTransaction: {\n    width: drawerWidthTransaction,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport {\n  Grid, Typography, Button, Card,\n} from '@material-ui/core';\n\nconst Product = ({\n  name, price, dispatch,\n}) => (\n  <>\n    <Grid item xs={12} md={6} lg={4}>\n      <Card style={{ backgroundColor: '#646464' }}>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Grid container directon=\"row\" justify=\"space-between\">\n          <Typography paragraph>{`$${price}`}</Typography>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => dispatch({\n              type: 'ADD_TO_TRANSACTION',\n              payload: { name, price, quantity: 1 },\n            })}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Card>\n    </Grid>\n    <Grid item xs={1} />\n  </>\n\n);\n\nProduct.propTypes = {\n  name: PropTypes.string.isRequired,\n  price: PropTypes.number.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default Product;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { Context } from '../App';\n\nconst ItemInTransaction = ({ name, quantity }) => {\n  const { dispatch } = useContext(Context);\n  return (\n    <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" space={0}>\n      <Grid item xs={2}>\n        <AddIcon\n          fontSize=\"small\"\n          color=\"secondary\"\n          onClick={() => dispatch({ type: 'INCREMENT_ITEM', payload: name })}\n        />\n      </Grid>\n      <Grid item xs={8}>\n        <p>{`${name} x${quantity}`}</p>\n      </Grid>\n      <Grid item xs={2}>\n        <RemoveIcon\n          fontSize=\"small\"\n          color=\"error\"\n          onClick={() => dispatch({ type: 'DECREMENT_ITEM', payload: name })}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nItemInTransaction.propTypes = {\n  name: PropTypes.string.isRequired,\n  quantity: PropTypes.number.isRequired,\n};\n\nexport default ItemInTransaction;\n","import React, { useContext } from 'react';\nimport {\n  Grid, Typography, Drawer, Divider, List, ListItem, Button,\n} from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport ItemInTransaction from './ItemInTransaction';\nimport useStyles from '../styles/classes';\nimport { Context } from '../App';\n\nconst TransactionBar = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(Context);\n\n  return (\n    <Drawer\n      className={classes.drawerTransaction}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaperTransaction,\n      }}\n      anchor=\"right\"\n    >\n      <List style={{ marginTop: '60px' }}>\n        {state.currentTransaction.products.map((product) => (\n          <ListItem key={uuidv4()}>\n            <ItemInTransaction name={product.name} quantity={product.quantity} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <Grid container justify=\"flex-end\">\n        <Grid item xs={9}>\n          <Typography paragraph>{`Total: $${state.currentTransaction.total}`}</Typography>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            color=\"secondary\"\n            onClick={() => dispatch({ type: 'COMPLETE_TRANSACTION' })}\n          >\n            Pay\n          </Button>\n        </Grid>\n      </Grid>\n    </Drawer>\n  );\n};\n\nexport default TransactionBar;\n","import React, { useContext, useEffect } from 'react';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { Context } from '../../App';\nimport Product from '../Product';\nimport TransactionBar from '../TransactionBar';\n\nconst Storefront = () => {\n  const { dispatch, state } = useContext(Context);\n\n  useEffect(() => {\n    fetch('/api/products')\n      .then((res) => res.json())\n      .then((data) => dispatch({ type: 'GET_PRODUCTS', payload: data }));\n  }, [dispatch]);\n\n  return (\n    <Grid container spacing={2}>\n      { !state.products\n        ? <CircularProgress />\n        : state.products.map((product) => (\n          <Product\n            key={product.name}\n            name={product.name}\n            price={product.price}\n            dispatch={dispatch}\n          />\n        ))}\n      <TransactionBar currentTransaction={state.currentTransaction} />\n    </Grid>\n  );\n};\n\nexport default Storefront;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Card, Typography } from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst TransactionReport = ({ products, totalProd, transactionDate }) => (\n  <Grid item xs={4}>\n    <Card style={{ height: '200px', backgroundColor: '#646464' }}>\n      <h3>{`Transaction date: ${transactionDate}`}</h3>\n      {products.map((product) => (\n        <Typography key={uuidv4()} paragraph>\n          {`${product.name} x${product.quantity}`}\n        </Typography>\n      ))}\n      <p>{`Total transaction value: $${totalProd}`}</p>\n    </Card>\n  </Grid>\n);\n\nTransactionReport.propTypes = {\n  products: PropTypes.instanceOf(Array).isRequired,\n  totalProd: PropTypes.number.isRequired,\n  transactionDate: PropTypes.string.isRequired,\n};\n\nexport default TransactionReport;\n","import React, { useState, useEffect } from 'react';\nimport { Grid, CircularProgress } from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport TransactionReport from '../TransactionReport';\n\nconst Transactions = () => {\n  const [transactions, setTransactions] = useState(false);\n  useEffect(() => {\n    fetch('/api/transactions')\n      .then((res) => res.json())\n      .then((data) => setTransactions(data));\n  }, []);\n  return (\n    <Grid container direction=\"row\" spacing={2}>\n      {!transactions\n        ? <CircularProgress />\n        : transactions.map((transaction) => (\n          <TransactionReport\n            key={uuidv4()}\n            products={transaction.products}\n            totalProd={transaction.total}\n            transactionDate={transaction.date}\n          />\n        ))}\n    </Grid>\n  );\n};\n\nexport default Transactions;\n","import React, { useState } from 'react';\nimport {\n  Grid, Button, FormControl, Input, InputLabel,\n} from '@material-ui/core';\n\nconst AdminPage = () => {\n  const [inputs, setInputs] = useState({ name: '', price: '' });\n  return (\n    <Grid container direction=\"column\" space={4} justify=\"center\" alignItems=\"center\">\n      <h1>ADD AN ITEM!</h1>\n      <Grid item xs={6}>\n        <FormControl>\n          <InputLabel htmlFor=\"name\">Product Name:</InputLabel>\n          <Input\n            id=\"name\"\n            onChange={(e) => setInputs({ ...inputs, name: e.target.value })}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl>\n          <InputLabel htmlFor=\"price\">Price:</InputLabel>\n          <Input\n            id=\"price\"\n            onChange={(e) => setInputs({ ...inputs, price: e.target.value })}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={{ marginTop: '10px' }}\n          onClick={() => {\n            if (inputs.name && inputs.price) {\n              fetch('/api/products', {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(inputs),\n              });\n            }\n          }}\n        >\n          Add\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AdminPage;\n","import React from 'react';\n\nconst Settings = () => (\n  <h1>SETTTIIIINGSSS</h1>\n);\n\nexport default Settings;\n","import React from 'react';\n\nconst NotFound = () => (\n  <h1>NotFound</h1>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport StorefrontIcon from '@material-ui/icons/Storefront';\nimport {\n  Route, Link, Redirect, BrowserRouter as Router,\n} from 'react-router-dom';\nimport useStyles from '../styles/classes';\nimport Storefront from './Routes/Storefront';\nimport Transactions from './Routes/Transactions';\nimport AdminPage from './Routes/AdminPage';\nimport Settings from './Routes/Settings';\nimport NotFound from './Routes/NotFound';\n\nconst BaseLayout = () => {\n  const classes = useStyles();\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <AppBar position=\"fixed\" className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" noWrap>\n              POS System v1.0.0\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <Toolbar />\n          <div className={classes.drawerContainer}>\n            <List>\n              {['Storefront', 'Transactions'].map((text, index) => (\n                <Link\n                  key={text}\n                  to={`/${text}`}\n                  style={{ textDecoration: 'none', color: 'white' }}\n                >\n                  <ListItem button>\n                    <ListItemIcon>\n                      {index % 2 === 0\n                        ? <StorefrontIcon />\n                        : <ReceiptIcon /> }\n                    </ListItemIcon>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                </Link>\n              ))}\n            </List>\n            <Divider />\n            <List>\n              {['AdminPage', 'Settings'].map((text, index) => (\n                <Link\n                  key={text}\n                  to={`/${text}`}\n                  style={{ textDecoration: 'none', color: 'white' }}\n                >\n                  <ListItem button>\n                    <ListItemIcon>\n                      {index % 2 === 0\n                        ? <SupervisorAccountIcon />\n                        : <SettingsIcon />}\n                    </ListItemIcon>\n                    <ListItemText primary={text} />\n                  </ListItem>\n                </Link>\n              ))}\n            </List>\n          </div>\n        </Drawer>\n        <main className={classes.content}>\n          <Toolbar />\n          <Redirect exact from=\"/\" to=\"Storefront\" />\n          <Route path=\"/Storefront\" component={Storefront} />\n          <Route path=\"/Transactions\" component={Transactions} />\n          <Route path=\"/AdminPage\" component={AdminPage} />\n          <Route path=\"/Settings\" component={Settings} />\n          <Route path=\"/404\" component={NotFound} />\n          <Redirect exact from=\"*\" to=\"/404\" />\n        </main>\n      </div>\n    </Router>\n  );\n};\n\nexport default BaseLayout;\n","import React, { useReducer } from 'react';\nimport { Paper } from '@material-ui/core';\nimport { reducer, initialState } from './reducer';\nimport BaseLayout from './Components/Sidebar';\n\nconst Context = React.createContext();\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <Paper style={{ height: '100vh', width: '100%' }}>\n        <BaseLayout />\n      </Paper>\n    </Context.Provider>\n  );\n}\n\nexport { App, Context };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './styles/theme';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}